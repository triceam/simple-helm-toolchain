---
defaultBaseImageVersion: latest
properties:
- name: API_KEY
  value: ${API_KEY}
  type: secure
stages:
- name: Create Workspace
  inputs:
  - type: git
    branch: master
    service: ${GIT_REPO}    
  triggers:
  - type: commit
  properties:
  - name: WORKSPACE_NAME
    value: ${APP_NAME}
    type: text
  - name: REGION_ID
    value: ${REGION_ID}
    type: text
  - name: RESOURCE_GROUP
    value: ${RESOURCE_GROUP}
    type: text
  jobs:
  - name: Create Workspace
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |+
      #!/bin/bash
      # set -x

      # force login (required by schematics cli)
      ibmcloud login --apikey $API_KEY -a "https://cloud.ibm.com" --no-region

      cat > "workspace.json" << EOL
      {
        "name": "${WORKSPACE_NAME}",
        "type": [
          "terraform_v0.11"
        ],
        "resource_group": "$RESOURCE_GROUP",
        "location": "us-south",
        "description": "Schematics workspace for terraform pipeline, created by DevOps.",
        "tags": [],
        "template_repo": {
          "url": "${GIT_URL}"
        },
          "template_data": [
            {
              "folder": ".",
              "type": "terraform_v0.11",
              "variablestore": []
            }
          ],
          "githubtoken": "",
        "status": "DRAFT",
        "workspace_status_msg": {
          "status_code": "",
          "status_msg": ""
        },
        "workspace_status": {
          "frozen": false,
          "locked": false
        }
      }
      EOL

      cat workspace.json

      IFS=$'\n'
      for i in $(ibmcloud terraform workspace new --file workspace.json); do
          echo "$i"
          if [[ "$i" == ID* ]]; then
              IFS=$' '
              arr=($i)
              export WORKSPACE_ID=${arr[1]}
              IFS=$'\n'
          fi
      done

      #check if we have a valid workspace id, otherwise fail this stage
      if [ -z "$WORKSPACE_ID" ]; then
          exit 1;
      fi

      echo "Schematics Workspace: $WORKSPACE_ID"

      cat > "workspace.env" << EOL
      export WORKSPACE_ID=$WORKSPACE_ID
      EOL

      cat workspace.env

      #note: This passes the workspace ID to the next stage but does not persist it!  Re-running this pipeline would create another schematics workspace!!!

- name: PLAN
  inputs:
  - type: job
    stage: "Create Workspace"
    job: "Create Workspace"
  triggers:
  - type: stage
  jobs:
  - name: "Terraform Plan"
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |
      #!/bin/bash

      # import worskpace id from previous job/stage
      source workspace.env

      # force login (required by schematics cli)
      ibmcloud login --apikey $API_KEY -a "https://cloud.ibm.com" --no-region
      
      # run terraform plan
      echo "ibmcloud terraform plan --id $WORKSPACE_ID"
      ACTIVITY=$(ibmcloud terraform plan -id $WORKSPACE_ID --json)
      # get rid of trailing "OK" if found
      if [[ $ACTIVITY == *OK ]]; then
        ACTIVITY=${ACTIVITY%??}
      fi
      ACTIVITY_ID=$(echo $ACTIVITY | jq -r ".activityid")
      echo "Activity ID   $ACTIVITY_ID"
      # poll until status is no longer INPROGRESS, or if there is an error
      while :
      do
        STATUS=$(ibmcloud terraform workspace action --id $WORKSPACE_ID --act-id $ACTIVITY_ID --json)
        
        RET_VAL=$?
        if [ $RET_VAL -ne 0 ]; then
          echo $STATUS
          exit $RET_VAL
        else
          # get rid of trailing "OK" if found
          if [[ $STATUS == *OK ]]; then
            STATUS=${STATUS%??}
          fi
          STATUS_VALUE=$(echo $STATUS | jq -r ".status")
          echo "Polling for status: $STATUS_VALUE"
          if [ "$STATUS_VALUE" = "FAILED" ]; then 
            ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY_ID
            exit 1
          elif [ "$STATUS_VALUE" != "INPROGRESS" ] && [ "$STATUS_VALUE" != "CREATED" ]; then  
            break
          fi
        fi
        # sleep for 5 seconds, while waiting for completion
        sleep 5
      done
      ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY_ID
- name: APPLY
  inputs:
  - type: job
    stage: PLAN
    job: "Terraform Plan"
  triggers:
  - type: stage
  jobs:
  - name: "Terraform Apply"
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |
      #!/bin/bash

      # import worskpace id from previous job/stage
      source workspace.env

      # force login (required by schematics cli)
      ibmcloud login --apikey $API_KEY -a "https://cloud.ibm.com" --no-region
      
      # run terraform apply
      echo "ibmcloud terraform apply --id $WORKSPACE_ID --force"
      ACTIVITY=$(ibmcloud terraform apply -id $WORKSPACE_ID --json --force)
      # get rid of trailing "OK" if found
      if [[ $ACTIVITY == *OK ]]; then
        ACTIVITY=${ACTIVITY%??}
      fi
      ACTIVITY_ID=$(echo $ACTIVITY | jq -r ".activityid")
      echo "Activity ID   $ACTIVITY_ID"
      # poll until status is no longer INPROGRESS, or if there is an error
      while :
      do
        STATUS=$(ibmcloud terraform workspace action --id $WORKSPACE_ID --act-id $ACTIVITY_ID --json)
        
        RET_VAL=$?
        if [ $RET_VAL -ne 0 ]; then
          echo $STATUS
          exit $RET_VAL
        else
          # get rid of trailing "OK" if found
          if [[ $STATUS == *OK ]]; then
            STATUS=${STATUS%??}
          fi
          STATUS_VALUE=$(echo $STATUS | jq -r ".status")
          echo "Polling for status: $STATUS_VALUE"
          if [ "$STATUS_VALUE" = "FAILED" ]; then
            ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY_ID
            exit 1
          elif [ "$STATUS_VALUE" != "INPROGRESS" ]; then  
            break
          fi
        fi
        # sleep for 5 seconds, while waiting for completion
        sleep 5
      done
      ibmcloud terraform logs --id $WORKSPACE_ID --act-id $ACTIVITY_ID
- name: TEST
  inputs:
  - type: job
    stage: APPLY
    job: "Terraform Apply"
  triggers:
  - type: stage
  jobs:
  - name: "Check Health"
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |
      #!/bin/bash

      # import worskpace id from previous job/stage
      source workspace.env

      echo "You can add tests here to ensure that your resources are healthy!"
