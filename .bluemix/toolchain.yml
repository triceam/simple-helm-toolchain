version: '2'
messages:
  $i18n: locales.yml
template:
  name:
    $ref: "#/messages/template.name"
  description:
    $ref: "#/messages/template.description"
  header: '![](toolchain.svg?localize)'
  icon: secure-lock-helm.svg
  required:
    - app-build
    - iac-build
    - repo
    - terraform-repo
  info:
    git url: >
      "[" + $env.repository + "]" +
        "(" + $env.repository + ")"
    git branch: >
      "[" + $env.branch + "]" +
        "(" + $env.repository +
          "/tree/" + $env.branch + ")"
toolchain:
  name: >
    $env.toolchainName ? '{{toolchainName}}' :
      'helm3-toolchain-{{timestamp}}'
  template:
    getting_started:
     $ref: "#/messages/template.gettingStarted"
services:
  terraform-repo:
    service_id: >
      $env.source_provider ? $env.source_provider : 'hostedgit'
    parameters:
      repo_name: >
        $env.toolchainName ? '{{toolchainName}}-terraform' :
          'hello-helm-{{timestamp}}-terraform'
      repo_url: 'https://github.com/triceam/cluster'
      source_repo_url: 'https://github.com/triceam/cluster'
      type: 'clone'
      has_issues: true
      enable_traceability: true
  repo:
    service_id: >
      $env.source_provider ? $env.source_provider : 'hostedgit'
    parameters:
      repo_name: >
        $env.toolchainName ? '{{toolchainName}}-source' :
          'hello-helm-{{timestamp}}-source'
      repo_url: >
        $env.type === 'link' ? $env.app_repo :
          $env.sourceZipUrl ? '{{sourceZipUrl}}' :
            'https://github.com/open-toolchain/hello-helm'
      source_repo_url: >
        $env.type === 'fork' || $env.type === 'clone' ? $env.app_repo :
          $env.sourceZipUrl ? '{{sourceZipUrl}}' : 
            'https://github.com/open-toolchain/hello-helm'
      type: $env.type || 'clone'
      has_issues: true
      enable_traceability: true
  app-build:
    service_id: pipeline
    parameters:
      services:
        - repo
      name: 'Application build'
      ui-pipeline: true
      configuration:
        content:
          $text: pipeline.yml
        env:
          GIT_REPO: repo
          APP_NAME: '{{form.pipeline.parameters.app-name}}'
          REGISTRY_REGION_ID: '{{form.pipeline.parameters.registry-region}}'
          REGISTRY_NAMESPACE: '{{form.pipeline.parameters.registry-namespace}}'
          API_KEY: '{{form.pipeline.parameters.api-key}}'
          PROD_REGION_ID: '{{form.pipeline.parameters.prod-region}}'
          PROD_RESOURCE_GROUP: '{{form.pipeline.parameters.prod-resource-group}}'
          PROD_CLUSTER_NAME: '{{form.pipeline.parameters.prod-cluster-name}}'
          PROD_CLUSTER_NAMESPACE: '{{form.pipeline.parameters.prod-cluster-namespace}}'
        execute: false
  iac-build:
    service_id: pipeline
    parameters:
      services:
        - terraform-repo
      name: 'Terraform'
      ui-pipeline: true
      configuration:
        content:
          $text: terraform-pipeline.yml
        env:
          GIT_REPO: terraform-repo
          API_KEY: '{{form.pipeline.parameters.api-key}}'
          APP_NAME: '{{form.pipeline.parameters.app-name}}'
          REGION_ID: '{{form.pipeline.parameters.prod-region}}'
          CLUSTER_NAME: '{{form.pipeline.parameters.prod-cluster-name}}'
          RESOURCE_GROUP: '{{form.pipeline.parameters.prod-resource-group}}'
        execute: true
  webide:
    service_id: orion
form:
  pipeline:
    parameters:
      app-name: >
        $env.appName ?
          '{{appName}}' : '{{services.repo.parameters.repo_name}}'
      prod-cluster-namespace: >
        $env.prodClusterNamespace ?
          '{{prodClusterNamespace}}' : 'prod'
      registry-region: '{{registryRegion}}'
      registry-namespace: '{{registryNamespace}}'
      api-key: '{{apiKey}}'
      prod-region: '{{prodRegion}}'
      prod-resource-group: '{{prodResourceGroup}}'
      prod-cluster-name: '{{prodClusterName}}'
    schema:
      $ref: deploy.json
